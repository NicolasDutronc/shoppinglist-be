// Code generated by mockery 2.7.5. DO NOT EDIT.

package mocks

import (
	context "context"

	hub "github.com/NicolasDutronc/shoppinglist-be/pkg/hub"
	mock "github.com/stretchr/testify/mock"
)

// Hub is an autogenerated mock type for the Hub type
type Hub struct {
	mock.Mock
}

// AddTopic provides a mock function with given fields: ctx, topic
func (_m *Hub) AddTopic(ctx context.Context, topic hub.Topic) error {
	ret := _m.Called(ctx, topic)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, hub.Topic) error); ok {
		r0 = rf(ctx, topic)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Close provides a mock function with given fields: ctx
func (_m *Hub) Close(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTopic provides a mock function with given fields: ctx, topic
func (_m *Hub) DeleteTopic(ctx context.Context, topic hub.Topic) error {
	ret := _m.Called(ctx, topic)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, hub.Topic) error); ok {
		r0 = rf(ctx, topic)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetProcessor provides a mock function with given fields: ctx, processorID
func (_m *Hub) GetProcessor(ctx context.Context, processorID string) (hub.Processor, error) {
	ret := _m.Called(ctx, processorID)

	var r0 hub.Processor
	if rf, ok := ret.Get(0).(func(context.Context, string) hub.Processor); ok {
		r0 = rf(ctx, processorID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(hub.Processor)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, processorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTopics provides a mock function with given fields: ctx
func (_m *Hub) GetTopics(ctx context.Context) ([]hub.Topic, error) {
	ret := _m.Called(ctx)

	var r0 []hub.Topic
	if rf, ok := ret.Get(0).(func(context.Context) []hub.Topic); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]hub.Topic)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Publish provides a mock function with given fields: ctx, msg
func (_m *Hub) Publish(ctx context.Context, msg hub.Message) error {
	ret := _m.Called(ctx, msg)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, hub.Message) error); ok {
		r0 = rf(ctx, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterMessageHook provides a mock function with given fields: ctx, hook
func (_m *Hub) RegisterMessageHook(ctx context.Context, hook hub.Processor) error {
	ret := _m.Called(ctx, hook)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, hub.Processor) error); ok {
		r0 = rf(ctx, hook)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterProcessor provides a mock function with given fields: ctx, p
func (_m *Hub) RegisterProcessor(ctx context.Context, p hub.Processor) error {
	ret := _m.Called(ctx, p)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, hub.Processor) error); ok {
		r0 = rf(ctx, p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Run provides a mock function with given fields: ctx, interrupt
func (_m *Hub) Run(ctx context.Context, interrupt chan struct{}) error {
	ret := _m.Called(ctx, interrupt)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, chan struct{}) error); ok {
		r0 = rf(ctx, interrupt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Subscribe provides a mock function with given fields: ctx, p, topic
func (_m *Hub) Subscribe(ctx context.Context, p hub.Processor, topic hub.Topic) error {
	ret := _m.Called(ctx, p, topic)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, hub.Processor, hub.Topic) error); ok {
		r0 = rf(ctx, p, topic)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnregisterMessageHook provides a mock function with given fields: ctx, hook
func (_m *Hub) UnregisterMessageHook(ctx context.Context, hook hub.Processor) error {
	ret := _m.Called(ctx, hook)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, hub.Processor) error); ok {
		r0 = rf(ctx, hook)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnregisterProcessor provides a mock function with given fields: ctx, p
func (_m *Hub) UnregisterProcessor(ctx context.Context, p hub.Processor) error {
	ret := _m.Called(ctx, p)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, hub.Processor) error); ok {
		r0 = rf(ctx, p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Unsubscribe provides a mock function with given fields: ctx, p, topic
func (_m *Hub) Unsubscribe(ctx context.Context, p hub.Processor, topic hub.Topic) error {
	ret := _m.Called(ctx, p, topic)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, hub.Processor, hub.Topic) error); ok {
		r0 = rf(ctx, p, topic)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
