// Code generated by mockery v1.0.0. DO NOT EDIT.

package list

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// AddItem provides a mock function with given fields: ctx, listID, itemName, itemQuantity
func (_m *MockRepository) AddItem(ctx context.Context, listID string, itemName string, itemQuantity string) (*Item, error) {
	ret := _m.Called(ctx, listID, itemName, itemQuantity)

	var r0 *Item
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *Item); ok {
		r0 = rf(ctx, listID, itemName, itemQuantity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Item)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, listID, itemName, itemQuantity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteList provides a mock function with given fields: ctx, listID
func (_m *MockRepository) DeleteList(ctx context.Context, listID string) (int64, error) {
	ret := _m.Called(ctx, listID)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, listID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, listID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllLists provides a mock function with given fields: ctx
func (_m *MockRepository) FindAllLists(ctx context.Context) ([]*Shoppinglist, error) {
	ret := _m.Called(ctx)

	var r0 []*Shoppinglist
	if rf, ok := ret.Get(0).(func(context.Context) []*Shoppinglist); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Shoppinglist)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindListByID provides a mock function with given fields: ctx, listID
func (_m *MockRepository) FindListByID(ctx context.Context, listID string) (*Shoppinglist, error) {
	ret := _m.Called(ctx, listID)

	var r0 *Shoppinglist
	if rf, ok := ret.Get(0).(func(context.Context, string) *Shoppinglist); ok {
		r0 = rf(ctx, listID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Shoppinglist)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, listID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveAllItems provides a mock function with given fields: ctx, listID
func (_m *MockRepository) RemoveAllItems(ctx context.Context, listID string) (int64, error) {
	ret := _m.Called(ctx, listID)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, listID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, listID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveItem provides a mock function with given fields: ctx, listID, itemName, itemQuantity
func (_m *MockRepository) RemoveItem(ctx context.Context, listID string, itemName string, itemQuantity string) (int64, error) {
	ret := _m.Called(ctx, listID, itemName, itemQuantity)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) int64); ok {
		r0 = rf(ctx, listID, itemName, itemQuantity)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, listID, itemName, itemQuantity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreList provides a mock function with given fields: ctx, listName
func (_m *MockRepository) StoreList(ctx context.Context, listName string) (*Shoppinglist, error) {
	ret := _m.Called(ctx, listName)

	var r0 *Shoppinglist
	if rf, ok := ret.Get(0).(func(context.Context, string) *Shoppinglist); ok {
		r0 = rf(ctx, listName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Shoppinglist)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, listName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ToggleItem provides a mock function with given fields: ctx, listID, itemName, itemQuantity, itemDone
func (_m *MockRepository) ToggleItem(ctx context.Context, listID string, itemName string, itemQuantity string, itemDone bool) (int64, error) {
	ret := _m.Called(ctx, listID, itemName, itemQuantity, itemDone)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, bool) int64); ok {
		r0 = rf(ctx, listID, itemName, itemQuantity, itemDone)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, bool) error); ok {
		r1 = rf(ctx, listID, itemName, itemQuantity, itemDone)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateItem provides a mock function with given fields: ctx, listID, itemName, itemQuantity, itemNewName, itemNewQuantity
func (_m *MockRepository) UpdateItem(ctx context.Context, listID string, itemName string, itemQuantity string, itemNewName string, itemNewQuantity string) (int64, error) {
	ret := _m.Called(ctx, listID, itemName, itemQuantity, itemNewName, itemNewQuantity)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, string) int64); ok {
		r0 = rf(ctx, listID, itemName, itemQuantity, itemNewName, itemNewQuantity)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, string) error); ok {
		r1 = rf(ctx, listID, itemName, itemQuantity, itemNewName, itemNewQuantity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
